📗 The backing store of a list. 📗
🎍🛢 🔏 🐇 🍧🐚Element ⚪🍆️ 🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  🆕 🍼count🔢 🍼size🔢 🍇
    ☣️ 🍇
      🆕🧠 size✖️⚖️Element❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Clone the storage area. 📗
  🆕 storage 🍧🐚Element🍆 🍇
    📏storage❓ ➡️ 🖍count
    🐴storage❓ ➡️ 🖍size

    ☣️ 🍇
      🆕🧠 size✖️⚖️Element❗️ ➡️ 🖍data
      🔂 i 🆕⏩ 0 📏storage❓❗️ 🍇
        🐽🐚Element🍆 🧠storage❗️i✖️⚖️Element❗️ ➡️🐽🐚Element🍆data i✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗 Returns the number of items in the list. 📗
  ❓ 📏 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗 Increase the length by *change*. 📗
  ❗️ 📏 change 🔢 🍇
    count ⬅️➕ change
  🍉

  📗 Returns the current capacity. 📗
  ❓ 🐴 ➡️ 🔢 🍇
    ↩️ size
  🍉

  📗 Ensures the capacity is at least *minimum*. 📗
  ❗️ 🐴 minimum 🔢 🍇
    ↪️ minimum ▶️ size 🍇
      minimum ➡️ 🖍size
      ☣️ 🍇
        🏗 data size✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗 Returns the 🧠 that is storing the list. 📗
  ❗️🧠 ➡️ 🧠 🍇
    ↩️ data
  🍉

  📗 Releases everything inside the list. 📗
  ☣️❗️♻️ 🍇
    🔂 i 🆕⏩ 0 count❗️ 🍇
      ♻️🐚Element🍆 data i✖️⚖️Element❗️
    🍉
  🍉

  ♻️ 🍇
    ☣️ 🍇
      ♻️❗️
    🍉
  🍉

  📗 Expand the storage area if it is full. 📗
  ❗️ ↕️ 🍇
    ↪️ size 🙌 count 🎍🐌🍇
      size ⬅️✖️ 2
      ☣️ 🍇
        🏗 data size✖️⚖️Element❗️
      🍉
    🍉
  🍉
🍉

📗
  List, an ordered mutable collection.

  🍨 provides random access, appending and removing from the last element in
  `O(1)`.

  🍨 is a value type. This means that copies of 🍨 are independent:

  ```
  🍿 🔤red🔤 🔤green🔤 🔤blue🔤 🍆 ➡️ colors
  colors ➡️ 🖍🆕otherColors
  🐻 otherColors 🔤pink🔤❗️
  ```

  In the above example the dictionary in `colors` will still contain only three
  strings as only `otherColors` was modified.

  To learn more about collection literals [see the Language Reference.](../../reference/literals.html#-collection-literal)
📗
🌍 🕊 🍨🐚Element ⚪🍆️ 🍇
  🖍🆕 data 🍧🐚Element🍆

  🐊 🔂🐚Element🍆
  🐊 🐽🐚Element🍆

  📗 Returns the backing store of this 🍨. 📗
  🔒❗️🍧 ➡️ 🍧🐚Element🍆 🍇
    ↩️ data
  🍉

  📗 Prepare this list for mutation. 📗
  🖍🔒❗️📝 🍇
    ↪️ ❎🏮data❗️🎍🐌🍇
      🆕🍧🐚Element🍆 data❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Creates an empty list. 📗
  🆕 🍇
    🆕🍧🐚Element🍆 0 10❗️ ➡️ 🖍data
  🍉

  📗
    Creates an empty list with the given initial capacity.

    Note that this initializer does not place any values in the list. This
    initializer can be used for better performance if the number of values that
    will be added is known in advance.
  📗
  🆕 ▶️🐴 capacity 🔢 🍇
    capacity➡️🖍🆕theCapacity
    ↪️ capacity ◀️🙌 0 🍇
      10 ➡️ 🖍theCapacity
    🍉
    🆕🍧🐚Element🍆 0 theCapacity❗️ ➡️ 🖍data
  🍉

  ☣️ 🆕 ▶️ 🍪 values 🧠 count 🔢 🍇
    count➡️🖍🆕theCapacity
    ↪️ count ◀️🙌 0 🍇
      10 ➡️ 🖍theCapacity
    🍉
    🆕🍧🐚Element🍆 count theCapacity❗️ ➡️ 🖍data
    🔂 i 🆕⏩ 0 count❗️ 🍇
      🐽🐚Element🍆 values i✖️⚖️Element❗️ ➡️ 🐽🐚Element🍆🧠data❗️ i✖️⚖️Element❗️
    🍉
  🍉

  📗 Creates an containing the specified number of a single, repeated value. 📗
  🆕 repeatedValue Element count 🔢 🍇
    🆕🍧🐚Element🍆 count count❗️ ➡️ 🖍data
    ☣️ 🍇
      🔂 i 🆕⏩ 0 count❗️ 🍇
        repeatedValue ➡️ 🐽🐚Element🍆🧠data❗️ i✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗 Appends `item` to the end of the list in `O(1)`. 📗
  🥯🖍❗️ 🐻 item Element 🍇
    📝❗️
    ↕️data❗️
    ☣️ 🍇
      item ➡️ 🐽🐚Element🍆🧠data❗️ 📏data❓✖️⚖️Element❗️
    🍉
    📏data 1❗️
  🍉

  📗
    Gets the item at *index* in `O(1)`. *index* must be greater than or equal
    to 0 and less than [[📏❓]] or the program will panic.
  📗
  🥯❗️ 🐽 index 🔢 ➡️ ✴️Element 🍇
    ↪️ index ▶️🙌 📏data❓ 👐 index ◀️ 0 🎍🐌🍇
      🤯🐇💻 🔤Index out of bounds in 🍨🐽🔤 ❗️
    🍉
    ☣️ 🍇
      ↩️ 🐽🐚Element🍆 🧠data❗️ index✖️⚖️Element❗️
    🍉
  🍉

  📗
    Sets *value* at *index*. *index* must be greater than or equal
    to 0 and less than [[📏❓]] or the program will panic.
  📗
  🥯🖍➡️ 🐽 value Element index 🔢 🍇
    📝❗️
    ↪️ index ▶️🙌 📏data❓ 👐 index ◀️ 0 🎍🐌🍇
      🤯🐇💻 🔤Index out of bounds in 🍨🐷❗️🔤 ❗️
    🍉
    ☣️ 🍇
      ♻️🐚Element🍆 🧠data❗️ index✖️⚖️Element❗️
      value ➡️ 🐽🐚Element🍆🧠data❗️  index✖️⚖️Element❗️
    🍉
  🍉

 📗
    Removes the item at `index` and shifts all following items to the left in
    `O(n)`.

    Returns 👍 unless the index is out of range.
 📗
 🥯🖍❗️ 🐨 index 🔢 ➡️ 👌 🍇
    📝❗️
    ↪️ index ◀️ 📏data❓ 🍇
      ☣️ 🍇
        ♻️🐚Element🍆 🧠data❗️ index✖️⚖️Element❗️
        🚜 🧠data❗️ index✖️⚖️Element 🧠data❗️ 🤜index ➕ 1🤛✖️⚖️Element 🤜📏data❓ ➖ 🤜index ➕ 1🤛🤛✖️⚖️Element❗️
      🍉
      📏data -1❗️
      ↩️ 👍
    🍉
    ↩️ 👎
  🍉

 📗
    Inserts the given values before the element with the given index.

    All items beginning from `index` are shifted to the right and `item` is
    then inserted at `index`. Complexity: `O(n)`.
 📗
 🥯🖍❗️ 🐵 index 🔢 item Element ➡️ 👌 🍇
    📝❗️
    ↕️data❗️
    ↪️ index ◀️ 📏data❓ 🍇
      ☣️ 🍇
        🚜 🧠data❗️ 🤜index ➕ 1🤛✖️⚖️Element 🧠data❗️ index✖️⚖️Element 🤜📏data❓ ➖ index 🤛✖️⚖️Element❗️
        item ➡️ 🐽🐚Element🍆🧠data❗️  index✖️⚖️Element❗️
      🍉
      📏data 1❗️
      ↩️ 👍
    🍉
    ↩️ 👎
  🍉

  📗 Returns the number of items in the list. 📗
  ❓ 📏 ➡️ 🔢 🍇
    ↩️ 📏data❓
  🍉

  📗 Appends the content of `list` to this list. Complexity: `O(n)`. 📗
  🥯🖍❗️ 🐥 list 🍨🐚Element🍆 🍇
    📝❗️
    📏data❓ ➡️ oldCount
    📏data 📏list❓❗️
    🐴data 📏data❓❗️
    ☣️ 🍇
      🔂 i 🆕⏩ 0 📏list❓❗️ 🍇
        🐽🐚Element🍆 🧠🍧list❗️❗ i✖️⚖️Element❗️ ➡️ 🐽🐚Element🍆🧠data❗️ 🤜i ➕ oldCount🤛✖️⚖️Element❗️
      🍉
    🍉
  🍉

  📗
    Removes the last item from the list and returns it in `O(1)`.
    If the list is empty no value is returned.
  📗
  🥯🖍❗️ 🐼 ➡️ 🍬Element 🍇
    📝❗️
    📏data -1❗️
    ☣️ 🍇
      🐽🐚Element🍆 🧠data❗️📏data❓✖️⚖️Element❗️ ➡️ value
      ♻️🐚Element🍆 🧠data❗️📏data❓✖️⚖️Element❗️
    🍉
    ↩️ value
  🍉

  📗
    Removes all elements from the list but keeps the list’s capacity.

    This can be much more efficient than using a new list. Complexity: `O(n)`.
  📗
  🖍❗️ 🐗 🍇
    📝❗️
    ☣️ 🍇
      ♻️data❗️
    🍉
    📏data 📏data❓ ✖️ -1❗️
  🍉

  📗
    Ensures that the list is large enough to store at least `capacity` elements.

    You should use this method if you plan to heavily use 🐷 with large indices
    in order to avoid automatic, useless allocations.

    Complexity: `O(n)`.
  📗
  🖍❗️ 🐴 capacity 🔢 🍇
    📝❗️
    🐴data capacity❗️
  🍉

  📗 Returns the lists current capacity. 📗
  ❓ 🐴 ➡️ 🔢 🍇
    ↩️ 🐴data❓
  🍉

  📗
    Returns a new list consisting of *length* elements beginning from
    the element at index *from* in this list. Complexity: O(n).

    For instance:

    ```
    🔪🍿0 1 2 3 4 5 6 7 8 9🍆 2 4❗ 💭 returns 🍿2 3 4 5🍆
    🔪🍿0 1 2 3 4 5 6 7 8 9🍆 10 6❗ 💭 returns 🆕🍨🐚🔢🍆❗
    🔪🍿0 1 2 3 4 5 6 7 8 9🍆 7 6❗ 💭 returns 🍿7 8 9🍆
    ```
  📗
  ❗️🔪 from🔢 length🔢 ➡️ 🍨🐚Element🍆 🍇
    🆕🍨🐚Element🍆❗ ➡️ 🖍️🆕output
    ↪️ 📏👇❓ ◀️ from 🍇
      ↩️ output
    🍉

    from ➡️ 🖍️🆕index
    🔁 📏output❓ ◀️ length 🤝 index ◀️ 📏👇❓ 🍇
      🐻output 🐽👇 index❗❗
      index ⬅️➕ 1
    🍉

    ↩️ output
  🍉

  📗
    Sorts this array in place using the quick sort algorithm using the ordering specified by
    `comparator`.

    `comparator` must return an integer less than, equal to, or greater than 0,
    if the first argument is considered respectively less than, equal to, or
    greater than the second.

    `comparator` must satisfy the following properties otherwise the result of the method call is undefined:
    - For all `a`, `b` and `c` of type Element, if `⁉️ comparator a b❗️ ▶️ 0 🤝 ⁉️ comparator b c❗️ ▶️ 0` then
      `⁉️ comparator a c❗️ ▶️ 0` (transitivity).
    - For all `a` and `b` of type Element, `⁉️ comparator a b❗️ 🙌 🔋⁉️ comparator b a❗️❗️` (antisymmetry).
  📗
  🖍❗️ 🦁 comparator 🍇Element Element➡️🔢🍉 🍇
    📝❗️
    🥃👇 0 📏❓ ➖ 1 comparator❗️
  🍉

  🔒❗️✂️ first 🔢 last 🔢 comparator 🍇Element Element➡️🔢🍉 ➡️ 🔢 🍇
    ☣️ 🍇
      🐽🐚Element🍆 🧠data❗️ 🤜first ➕ 🤜last ➖ first🤛 ➗ 2🤛✖️⚖️Element❗️  ➡️ pivot
    🍉

    first ➖ 1 ➡️🖍🆕i
    last ➕ 1 ➡️🖍🆕j


    🔁 👍 🍇
      i ⬅️➕ 1
      ☣️ 🍇
        🔁 i ◀️🙌 last 🤝 ⁉️comparator 🐽🐚Element🍆 🧠data❗️ i✖️⚖️Element❗️ pivot❗️ ◀️ 0 🍇
          i ⬅️➕ 1
        🍉
      🍉

      j ⬅️➖ 1
      ☣️ 🍇
        🔁 j ▶️🙌 first 🤝 ⁉️comparator 🐽🐚Element🍆 🧠data❗️ j✖️⚖️Element❗️ pivot❗️ ▶️ 0 🍇
          j ⬅️➖ 1
        🍉
      🍉

      ↪️ i ▶️🙌 j 🍇
        ↩️ j
      🍉

      ☣️ 🍇
        🔄👇 i j❗️
      🍉
    🍉
    🤯🐇💻 🔤Unreachable code reached during 🦁🔤 ❗️
    ↩️0
  🍉

  🔒❗️🥃 first 🔢 last 🔢 comparator 🍇Element Element➡️🔢🍉 🍇
    ↪️ first ◀️ last 🍇
      ✂️👇 first last comparator❗️ ➡️ p
      ↪️ p 🙌 last 👐 p ◀️ first 🍇
        💭 The comparator does not fulfill the required properties.
        💭 There is no way we can make progress as either 🥃 call below will lead to an infinite recursion.
        ↩️↩️
      🍉
      🥃👇 first p comparator❗️
      🥃👇 p ➕ 1 last comparator❗️
    🍉
  🍉

  ☣️🔒❗🔄 a 🔢 b 🔢 🍇
    🐽🐚Element🍆 🧠data❗️ a✖️⚖️Element❗️ ➡️ temp
    🐽🐚Element🍆 🧠data❗️ b✖️⚖️Element❗️ ➡️🐽🐚Element🍆🧠data❗️ a✖️⚖️Element❗️
    temp ➡️🐽🐚Element🍆🧠data❗️ b✖️⚖️Element❗️
  🍉

  📗
    Shuffles the list in place using a Fisher–Yates shuffle.
  📗
  🖍❗️ 🐹 🍇
    📝❗️
    🆕🎰❗️ ➡️ prng
    📏data❓ ➡️ count

    🔂 i 🆕⏩ 0 count❗️ 🍇
      🔢 prng 0 count ➖ 1❗️ ➡️ x

      ☣️ 🍇
        🔄👇 i x❗️
      🍉
    🍉
  🍉

  📗
    Calls callback with each element in the list and appends the returned
    value to the end of a new list.
  📗
  ❗️ 🐰 🐚A⚪🍆️ callback 🍇Element➡️A🍉 ➡️ 🍨🐚A🍆 🍇
    🆕🍨🐚A🍆▶️🐴 📏❓❗️ ➡️ 🖍🆕g
    🔂 element 👇 🍇
      🐻 g ⁉️callback element❗️❗️
    🍉
    ↩️ g
  🍉

  📗
    Returns a new array with all elements that pass the test implemented by
    `callback`.
  📗
  ❗️ 🐭 callback 🍇Element➡️👌🍉 ➡️ 🍨🐚Element🍆 🍇
    🆕🍨🐚Element🍆❗️ ➡️ 🖍🆕g
    🔂 element 👇 🍇
      ↪️ ⁉️ callback element❗️ 🍇
        🐻 g element❗️
      🍉
    🍉
    ↩️ g
  🍉

  📗
    Returns 👍 if at least one element in the list is equal to `value`.
  📗
  ❓ 🐦🐚A😛🐚Element🍆🍆 value A ➡️ 👌 🍇
    🔂 element 👇 🍇
      ↪️ value 🙌 element 🍇
        ↩️ 👍
      🍉
    🍉
    ↩️👎
  🍉

  📗
    Tests whether all elements in the array pass the test implemented by
    `callback`.

    The method immdiately returns 👎 if `callback` returned 👎 for one element.
  📗
  ❗️ 🐯 callback 🍇Element➡️👌🍉 ➡️ 👌 🍇
    🔂 element 👇 🍇
      ↪️ ❎ ⁉️callback element❗️ ❗️ 🍇
        ↩️ 👎
      🍉
    🍉
    ↩️ 👍
  🍉

  📗
    Combines all elements in this list by using the binary operation
    described by `callable`. The first argument is the result of the
    previous call of the callable, while the first value of the list is used as
    the initial value and never passed as the second argument.
  📗
  ❗ 🐧 callable 🍇Element Element➡️Element🍉 ➡️ 🍬Element 🍇
    ↪️ 0 🙌 📏data❓ 🍇
      ↩️🤷‍♂️
    🍉

    🐽👇 0❗️ ➡️ 🖍🆕 result
    🍡❗ ➡️ it
    🔽it❗️

    🔂 element it 🍇
       ⁉️ callable result element❗ ➡️ 🖍result
    🍉

    ↩️ result
  🍉

  📗
    Combines all elements in this list by using the binary operation
    described by `callable`. The first argument is the result of the
    previous call of the callable, with `start` used as the initial value passed
    along with the first element of the list.
  📗
  ❗ 🐤🐚A⚪🍆️ start A callable 🍇A Element➡️A🍉 ➡️ A 🍇
    start ➡️ 🖍🆕 result
    🔂 element 👇 🍇
      ⁉️ callable result element❗ ➡️ 🖍result
    🍉
    ↩️ result
  🍉

  📗 Reverses the list in place. 📗
  🖍❗ 🦔 🍇
    📝❗️
    📏data❓ ➖ 1 ➡️ backIndex
    🔂 i 🆕⏩ 0 📏data❓ ➗ 2 ❗ 🍇
      ☣️ 🍇
        🔄👇 i backIndex ➖ i ❗
      🍉
    🍉
  🍉

  📗 Tests whether this array and `other` are equal. 📗
  🙌 🐚A😛🐚Element🍆🍆 other 🍨🐚A🍆 ➡️ 👌 🍇
    ↪️ ❎ 📏❓ 🙌 📏other❓ ❗️ 🍇
      ↩️ 👎
    🍉

    🔂 i 🆕⏩  0 📏❓ ❗️ 🍇
      ↪️ ❎ 🐽 other i❗️ 🙌 🐽 👇  i❗️ ❗️ 🍇
        ↩️ 👎
      🍉
    🍉
    ↩️ 👍
  🍉

  📗 Returns an iterator to iterate over the elements of this list. 📗
  ❗️ 🍡 ➡️ 🌳🐚Element🍆 🍇
    ↩️ 🆕🌳🐚Element🍆👇❗️
  🍉
🍉

📗
  Wrapper for 🍨.

  This class wraps around [[🍨]] and allows it to be passed by reference.

  It is mainly provided for backwards compatibility and may be removed in a
  future version.
📗
🌍 🐇 🍦🐚Element ⚪🍆️ 🍇
  🐊 🔂🐚Element🍆

  🖍🆕 array 🍨🐚Element🍆️

  📗 Creates an empty list. 📗
  🆕 🍇
    🆕🍨🐚Element🍆❗️➡️ 🖍array
  🍉

  📗 Appends an element to the list. 📗
  ❗️ 🐻 item Element 🍇
    🐻array item❗️
  🍉

  📗 Returns a copy of the list. 📗
  ❗️ 🥄 ➡️ 🍨🐚Element🍆️ 🍇
    ↩️ array
  🍉

  ❗️ 🍡 ➡️ 🌳🐚Element🍆 🍇
    ↩️ 🍡array❗️
  🍉
🍉
